{"ast":null,"code":"const getCurrentUserData = () => {\n  return JSON.parse(localStorage.getItem(\"userData\"));\n};\nconst makeAPICall = async (url, method, headers, body) => {\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Accept\", \"application/json\");\n  myHeaders.append(\"Origin\", \"http://localhost:3000\");\n  for (const [key, value] of Object.entries(headers)) {\n    myHeaders.append(key, value);\n  }\n  const requestOptions = {\n    method: method,\n    headers: myHeaders\n  };\n  if (method === \"POST\") {\n    requestOptions[body] = body;\n  }\n  let data = await fetch(url, requestOptions).then(response => response.text).then(result => {\n    return result;\n  }).catch(error => {\n    return error;\n  });\n  return data;\n};\nconst HelperService = {\n  getCurrentUserData,\n  makeAPICall\n};\nexport default HelperService;","map":{"version":3,"names":["getCurrentUserData","JSON","parse","localStorage","getItem","makeAPICall","url","method","headers","body","myHeaders","Headers","append","key","value","Object","entries","requestOptions","data","fetch","then","response","text","result","catch","error","HelperService"],"sources":["C:/Users/srini/OneDrive/Documents/Web Development/Eclipse Workplace/FinalProject/frontend/src/services/HelperService.js"],"sourcesContent":["const getCurrentUserData = () => {\r\n  return JSON.parse(localStorage.getItem(\"userData\"));\r\n};\r\n\r\nconst makeAPICall = async (url, method, headers, body) => {\r\n  const myHeaders = new Headers();\r\n\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  myHeaders.append(\"Accept\", \"application/json\");\r\n  myHeaders.append(\"Origin\", \"http://localhost:3000\");\r\n\r\n  for (const [key, value] of Object.entries(headers)) {\r\n    myHeaders.append(key, value);\r\n  }\r\n\r\n  const requestOptions = {\r\n    method: method,\r\n    headers: myHeaders,\r\n  };\r\n\r\n  if (method === \"POST\") {\r\n    requestOptions[body] = body;\r\n  }\r\n\r\n  let data = await fetch(url, requestOptions)\r\n    .then((response) => response.text)\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n    .catch((error) => {\r\n      return error;\r\n    });\r\n\r\n  return data;\r\n};\r\n\r\nconst HelperService = {\r\n  getCurrentUserData,\r\n  makeAPICall,\r\n};\r\n\r\nexport default HelperService;\r\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AACrD,CAAC;AAED,MAAMC,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAEC,IAAI,KAAK;EACxD,MAAMC,SAAS,GAAG,IAAIC,OAAO,EAAE;EAE/BD,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;EACpDF,SAAS,CAACE,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC;EAC9CF,SAAS,CAACE,MAAM,CAAC,QAAQ,EAAE,uBAAuB,CAAC;EAEnD,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,OAAO,CAAC,EAAE;IAClDE,SAAS,CAACE,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC;EAC9B;EAEA,MAAMG,cAAc,GAAG;IACrBV,MAAM,EAAEA,MAAM;IACdC,OAAO,EAAEE;EACX,CAAC;EAED,IAAIH,MAAM,KAAK,MAAM,EAAE;IACrBU,cAAc,CAACR,IAAI,CAAC,GAAGA,IAAI;EAC7B;EAEA,IAAIS,IAAI,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAEW,cAAc,CAAC,CACxCG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCF,IAAI,CAAEG,MAAM,IAAK;IAChB,OAAOA,MAAM;EACf,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChB,OAAOA,KAAK;EACd,CAAC,CAAC;EAEJ,OAAOP,IAAI;AACb,CAAC;AAED,MAAMQ,aAAa,GAAG;EACpB1B,kBAAkB;EAClBK;AACF,CAAC;AAED,eAAeqB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}