{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\OneDrive\\\\Documents\\\\Web Development\\\\Eclipse Workplace\\\\FinalProject\\\\frontend\\\\src\\\\components\\\\RegistrationForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegistrationForm() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [retypePassword, setRetypePassword] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const history = useHistory();\n  const validateName = name => {\n    const nameRegex = /^[a-zA-Z ]+$/;\n    return nameRegex.test(name);\n  };\n  const validateEmail = email => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  const validatePassword = password => {\n    return password.length >= 6;\n  };\n  const handleNameChange = e => {\n    setName(e.target.value);\n    if (!validateName(e.target.value)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        name: \"Name must contain only letters including spaces\"\n      }));\n    } else {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        name: \"\"\n      }));\n    }\n  };\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n    if (!validateEmail(e.target.value)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        email: \"Please enter a valid email address\"\n      }));\n    } else {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        email: \"\"\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"RegistrationForm\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n_s(RegistrationForm, \"231HlcHQmwnO26lzpZ4FvV362Qc=\", false, function () {\n  return [useHistory];\n});\n_c = RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","RegistrationForm","_s","name","setName","email","setEmail","password","setPassword","retypePassword","setRetypePassword","errors","setErrors","history","validateName","nameRegex","test","validateEmail","emailRegex","validatePassword","length","handleNameChange","e","target","value","prevErrors","handleEmailChange","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/srini/OneDrive/Documents/Web Development/Eclipse Workplace/FinalProject/frontend/src/components/RegistrationForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function RegistrationForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [retypePassword, setRetypePassword] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const history = useHistory();\r\n\r\n  const validateName = (name) => {\r\n    const nameRegex = /^[a-zA-Z ]+$/;\r\n    return nameRegex.test(name);\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    return password.length >= 6;\r\n  };\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n    if (!validateName(e.target.value)) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        name: \"Name must contain only letters including spaces\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({ ...prevErrors, name: \"\" }));\r\n    }\r\n  };\r\n\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.target.value);\r\n    if (!validateEmail(e.target.value)) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        email: \"Please enter a valid email address\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({ ...prevErrors, email: \"\" }));\r\n    }\r\n  };\r\n\r\n  return <div>RegistrationForm</div>;\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMgB,OAAO,GAAGf,UAAU,EAAE;EAE5B,MAAMgB,YAAY,GAAIX,IAAI,IAAK;IAC7B,MAAMY,SAAS,GAAG,cAAc;IAChC,OAAOA,SAAS,CAACC,IAAI,CAACb,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMc,aAAa,GAAIZ,KAAK,IAAK;IAC/B,MAAMa,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACF,IAAI,CAACX,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMc,gBAAgB,GAAIZ,QAAQ,IAAK;IACrC,OAAOA,QAAQ,CAACa,MAAM,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9BlB,OAAO,CAACkB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACvB,IAAI,CAACV,YAAY,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,EAAE;MACjCZ,SAAS,CAAEa,UAAU,KAAM;QACzB,GAAGA,UAAU;QACbtB,IAAI,EAAE;MACR,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLS,SAAS,CAAEa,UAAU,KAAM;QAAE,GAAGA,UAAU;QAAEtB,IAAI,EAAE;MAAG,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMuB,iBAAiB,GAAIJ,CAAC,IAAK;IAC/BhB,QAAQ,CAACgB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACxB,IAAI,CAACP,aAAa,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,EAAE;MAClCZ,SAAS,CAAEa,UAAU,KAAM;QACzB,GAAGA,UAAU;QACbpB,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLO,SAAS,CAAEa,UAAU,KAAM;QAAE,GAAGA,UAAU;QAAEpB,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC;IAC3D;EACF,CAAC;EAED,oBAAOL,OAAA;IAAA2B,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;AACpC;AAAC7B,EAAA,CA/CuBD,gBAAgB;EAAA,QAMtBH,UAAU;AAAA;AAAAkC,EAAA,GANJ/B,gBAAgB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}